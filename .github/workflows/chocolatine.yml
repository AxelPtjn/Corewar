name: Chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
      - 'error_handling'
      - 'flags_gestion'
      - 'nathan_dev'
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-CPE-200-LYN-2-1-corewar-pierre.giordano.git"
  EXECUTABLES: "asm/asm,corewar/corewar"

jobs:
  check_coding_style:
    name: Check_coding_style
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: check_coding_style
      run: |
        check.sh $(pwd) $(pwd)
        if [ -z "$(cat coding-style-reports.log)" ]
        then
          exit 0
        fi
        IFS=$'\n'
        for line in $(cat coding-style-reports.log)
        do
          size=$(echo $line | grep -o -E 'MAJOR|MINOR|INFO')
          src=$(echo $line | cut -d ':' -f1)
          linefile=$(echo $line | cut -d ':' -f2)
          type=$(echo $line | cut -d ':' -f4)
          echo "::error title=$size coding style error,file=$src,line=$linefile::$type"
        done
        exit 1

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    timeout-minutes: 2
    steps:
      - name: Checkout_code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build_code
        run: make
      - name: Clean build artifacts
        run: make clean
      - name: Verify executables exist
        run: |
          for executable in $(echo $EXECUTABLES | tr ',' ' '); do
            if [ ! -x "$executable" ]; then
              echo "ERROR: $executable not found or not executable"
              exit 1
            fi
          done

  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    timeout-minutes: 2
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Run tests
        run: make tests_run

  push_to_mirror:
    if: github.event_name == 'push'
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push_to_mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: "${{ env.MIRROR_URL }}"
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY  }}
